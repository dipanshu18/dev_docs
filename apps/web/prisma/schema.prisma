datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Blog          Blog[]
  likes         Like[]
  fires         Fire[]
  hearts        Heart[]
  comments      Comment[]
  replies       Reply[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Blog {
  id        String    @id @default(uuid())
  title     String
  thumbnail String
  body      String
  userId    String
  published Boolean   @default(false)
  likes     Like[]
  fires     Fire[]
  hearts    Heart[]
  comments  Comment[]
  replies   Reply[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@map("Blogs")
}

model Like {
  id     String @id @default(uuid())
  blog   Blog   @relation(references: [id], fields: [blogId], onDelete: Cascade)
  blogId String
  user   User   @relation(references: [id], fields: [userId])
  userId String

  @@unique([blogId, userId])
}

model Fire {
  id     String @id @default(uuid())
  blog   Blog   @relation(references: [id], fields: [blogId], onDelete: Cascade)
  blogId String
  user   User   @relation(references: [id], fields: [userId])
  userId String

  @@unique([blogId, userId])
}

model Heart {
  id     String @id @default(uuid())
  blog   Blog   @relation(references: [id], fields: [blogId], onDelete: Cascade)
  blogId String
  user   User   @relation(references: [id], fields: [userId])
  userId String

  @@unique([blogId, userId])
}

model Comment {
  id      String  @id @default(uuid())
  blog    Blog    @relation(references: [id], fields: [blogId], onDelete: Cascade)
  blogId  String
  user    User    @relation(references: [id], fields: [userId])
  userId  String
  body    String
  replies Reply[]
}

model Reply {
  id        String  @id @default(uuid())
  body      String
  comment   Comment @relation(references: [id], fields: [commentId], onDelete: Cascade)
  commentId String
  blog      Blog    @relation(references: [id], fields: [blogId], onDelete: Cascade)
  blogId    String
  user      User    @relation(references: [id], fields: [userId])
  userId    String
}
